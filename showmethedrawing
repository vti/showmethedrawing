#!/usr/bin/perl

use FindBin;
use lib "$FindBin::Bin/mojo/lib";

use Mojolicious::Lite;
use Mojo::JSON;

@ARGV = qw/daemon/ unless @ARGV;

my $clients = {};
my $history = [];

websocket '/' => sub {
    my $self = shift;
    my $tx = $self->tx;

    my $cid = "$tx";

    $clients->{$cid}->{tx} = $tx;

    my $total_clients = keys %$clients;
    my $ip = $tx->remote_address;
    app->log->debug("Client '$ip' connected [$total_clients]");

    # Notify everybody that new client is connected
    _send_broadcast_status(clients => $total_clients);

    foreach my $message (@$history) {
        $self->send_json($message);
    }

    $self->receive_message(
        sub {
            my ($self, $message) = @_;

            my $json = Mojo::JSON->new;

            $message = $json->decode($message);
            return unless $message || $json->error;

            push @$history, $message;
            shift @$history while @$history > 100;

            # Send a new draw to everybody
            _send_draw_broadcast($tx, %$message);
        }
    );

    $self->finished(
        sub {
            delete $clients->{$cid};

            my $total_clients = keys %$clients;

            # Notify everybody that client has disconnected
            _send_broadcast_status(clients => $total_clients);

            app->log->debug('Client disconnected');
        }
    );
};

get '/' => 'index';

sub _send_draw_broadcast {
    # Send it to everyone
    _send_broadcast(@_);
}

sub _send_broadcast_status {
    _send_broadcast(type => 'status', content => {@_});
}

sub _send_status {
    my $tx = shift;

    $tx->send_json({type => 'status', content => {@_}});
}

sub _send_broadcast {
    my $tx = '';
    $tx = shift if @_ % 2 > 0;
    $tx = "$tx";

    foreach my $cid (keys %$clients) {
        next if $cid eq $tx;
        $clients->{$cid}->{tx}->send_json({@_});
    }
}

# see script/flash-policy-server
print "Remember, you need to also run 'sudo perl mojo/examples/flash-policy-server' as root for this to work...\n";

app->start;

1;

__DATA__

@@ index.html.ep
% layout 'wrapper';
Please, enable JavaScript.<br /><br />

If your browser doesn't support Websockets,<br />
make sure you have Flash<br />
installed. It is used as workaround.

@@ layouts/wrapper.html.ep
% my $url = $self->req->url->to_abs->scheme($self->req->is_secure ? 'wss' : 'ws')->path('/');
<!doctype html><html>
    <head>
        <title>Presentation</title>
        <link rel="stylesheet" href="/main.css" type="text/css" />
        <script type="text/javascript" src="/jquery.min.js"></script>
        <script type="text/javascript" src="/jquery.json.min.js"></script>
        <script type="text/javascript">
            // Only load the flash fallback when needed
            if (!('WebSocket' in window)) {
                document.write([
                    '<scr'+'ipt type="text/javascript" src="web-socket-js/swfobject.js"></scr'+'ipt>',
                    '<scr'+'ipt type="text/javascript" src="web-socket-js/FABridge.js"></scr'+'ipt>',
                    '<scr'+'ipt type="text/javascript" src="web-socket-js/web_socket.js"></scr'+'ipt>'
                ].join(''));
            }
        </script>
        <script type="text/javascript">
            if (WebSocket.__initialize) {
                // Set URL of your WebSocketMain.swf here:
                WebSocket.__swfLocation = 'web-socket-js/WebSocketMain.swf';
            }

            var ws;
            var connected = false;
            var canvas, context, tool, col;
            var queue = [];

            function init() {
                connected = false;
                displayMessage('Connecting...');

                // Connect to WebSocket
                ws = new WebSocket('<%= $url %>');

                ws.onerror = function(e) {
                    displayMessage("Error: " + e);
                };

                // Set event handlers
                ws.onopen = function() {
                    connected = true;
                    displayMessage('Connected. Loading...');

                    initCanvas();
                };

                ws.onmessage = function(e) {
                    var data = $.evalJSON(e.data);

                    if (data == null) {
                    }
                    else if (data.type == 'status') {
                        if (data.content.clients != null) {
                            $('#clients_status').html(data.content.clients);
                        }
                    }
                    else if (data.type == 'line') {
                        if (tool && tool.started) {
                            queue.push(data);
                        }
                        else {
                            context.strokeStyle = data.col;
                            context.beginPath();
                            context.moveTo(data.x0, data.y0);
                            context.lineTo(data.x1, data.y1);
                            context.stroke();
                            context.closePath();
                        }
                    }
                };

                ws.onclose = function() {
                    displayMessage('Disconnected. <a href="/">Reconnect</a>');
                }
            }

            function displayMessage(msg) {
                $('#content').html(msg);
            }

            function getRandomColor() {
                colors = new Array(14);
                colors[0]="0";
                colors[1]="1";
                colors[2]="2";
                colors[3]="3";
                colors[4]="4";
                colors[5]="5";
                colors[5]="6";
                colors[6]="7";
                colors[7]="8";
                colors[8]="9";
                colors[9]="a";
                colors[10]="b";
                colors[11]="c";
                colors[12]="d";
                colors[13]="e";
                colors[14]="f";

                var color = '';
                for (i = 0; i < 6; i++){
                    color += colors[Math.round(Math.random() * (colors.length - 1))]
                }

                return '#' + color;
            }

            // Based on http://devfiles.myopera.com/articles/649/example2.js
            function initCanvas() {
                $('#content').html('');
                $('#content').append('<div style="text-align:right"><button id="clear">clear</button></div>');
                $('#content').append('<canvas id="canvas" width="800" height="500"></canvas>');

                $('#clear').click(function () {context.clearRect(0, 0, 800, 500)});

                col = getRandomColor();

                // Find the canvas element.
                canvas = $('canvas');
                if (!canvas) {
                  alert('Error: I cannot find the canvas element!');
                  return;
                }

                if (!canvas[0].getContext) {
                  alert('Error: no canvas.getContext!');
                  return;
                }

                // Get the 2D canvas context.
                context = canvas[0].getContext('2d');
                if (!context) {
                  alert('Error: failed to getContext!');
                  return;
                }

                // Pencil tool instance.
                tool = new tool_pencil();

                canvas.bind('mousedown', ev_canvas, false);
                canvas.bind('mousemove', ev_canvas, false);
                canvas.bind('mouseup',   ev_canvas, false);
            }

            function spin() {
                if (queue.length) {
                    var data;
                    while ((data = queue.shift())) {
                        context.strokeStyle = data.col;
                        context.beginPath();
                        context.moveTo(data.x0, data.y0);
                        context.lineTo(data.x1, data.y1);
                        context.stroke();
                        //context.closePath();
                    }
                }
            }

            function tool_pencil () {
                var tool = this;
                this.started = false;

                this.last = {"x" : 0, "y" : 0};

                this.mousedown = function (ev) {
                    context.strokeStyle = col;
                    context.beginPath();
                    context.moveTo(ev._x, ev._y);
                    tool.started = true;
                    tool.last.x = ev._x;
                    tool.last.y = ev._y;
                };

                this.mousemove = function (ev) {
                  if (tool.started) {
                    context.strokeStyle = col;
                    context.lineTo(ev._x, ev._y);
                    context.stroke();

                    //spin();

                    ws.send($.toJSON({"type" : "line",
                                "x0" : tool.last.x,
                                "y0" : tool.last.y,
                                "x1" : ev._x,
                                "y1" : ev._y,
                                "col" : col
                            }));

                    tool.last.x = ev._x;
                    tool.last.y = ev._y;
                  }
                };

                this.mouseup = function (ev) {
                  if (tool.started) {
                    tool.mousemove(ev);
                    tool.started = false;

                    spin();
                  }
                };
            }

            function ev_canvas (ev) {
                var pos = canvas.offset();

                ev._x = ev.pageX - pos.left;
                ev._y = ev.pageY - pos.top;

                // Call the event handler of the tool.
                var func = tool[ev.type];
                if (func) {
                    func(ev);
                }
            }

            $(document).ready(function() {
                init();
            });
        </script>
    </head>
    <body>
        <div id="status">
            clients: <span id="clients_status">n/a</span><br />
        </div>
        <div class="container">
            <table border="0" height="100%" style="margin:auto">
            <tr><td style="vertical-align:middle">
                <div id="content">
                    <%== content %>
                </div>
            </td></tr>
            </table>
        </div>
    </body>
</html>
